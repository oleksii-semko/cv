{"version":3,"sources":["me.jpeg","containers/Header/index.js","components/InfoSection/index.js","components/InfoBlock/index.js","components/LineSeparator/index.js","containers/MainContent/index.js","services/DataProvider/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","photo","alt","href","target","rel","React","Component","InfoSection","props","title","contentAlignment","children","Fragment","defaultProps","InfoBlock","subTitle","period","city","content","LineSeparator","color","height","topGap","bottomGap","style","backgroundColor","marginTop","marginBottom","MainContent","data","map","entry","job","technoligies","company","jd","position","duration","tech","institution","degree","cource","console","log","this","renderEmploymentHistory","renderEducation","renderCources","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82d8cd6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.fa4a78f9.jpeg\";","import React from 'react';\nimport photo from './../../me.jpeg';\n\nimport './index.scss';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header>\n        <div className=\"intro\">\n          <h1>Oleksii Semko</h1>\n          <h2 className=\"blue\">Sr. Web Developer</h2>\n          <img src={photo} className=\"photo\" alt=\"logo\" />\n        </div>\n        <address className=\"contacts\">\n          <div className=\"contact left\">\n            <p><span className=\"blue\">Address</span>Gostomel highway, Bldg. 3, Irpin, 08206, Ukraine</p>\n            <p>\n              <span className=\"blue\">Email</span>\n              <a href=\"mailto:oleksii.semko@gmail.com\">oleksii.semko@gmail.com</a>\n            </p>\n            <p>\n              <span className=\"blue\">Links</span>\n              <a\n                className=\"App-link\"\n                href=\"https://reactjs.org\"  \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >Linkedin</a>,\n              <a\n                className=\"App-link\"\n                href=\"https://reactjs.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >Upwork</a>,\n              <a\n                className=\"App-link\"\n                href=\"https://reactjs.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >Github</a>\n            \n            </p>\n          </div>\n          <div className=\"contact right\">\n            <p><span className=\"blue\">Phone</span>+380931184382</p>\n            <p><span className=\"blue\">Date of birth</span>March 21, 1986</p>\n\n          </div>\n        </address>\n      </header>\n    );\n  }  \n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst InfoSection = (props) => {\n    const {title, contentAlignment, children} = props;\n\n    return (\n        <section className={`info_section ${contentAlignment}`}>\n            {title &&\n                <h2>{title}</h2>\n            }\n            {children && <React.Fragment>{children}</React.Fragment>}\n        </section>\n    );\n}\n\nInfoSection.propTypes = {\n    title: PropTypes.string,\n    contentAlignment: PropTypes.string,\n    children: PropTypes.node\n}\n\nInfoSection.defaultProps = {\n    title: '',\n    contentAlignment: 'row',\n    children: null\n}\n\nexport default InfoSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst InfoBlock = (props) => {\n    const {title, subTitle, period, city, content} = props;\n\n    return (\n        <div className=\"info_block\">\n            <div className=\"additional_details\">\n                {period && <div className=\"date_range\">{period}</div>}\n                {city && <div className=\"city\">{city}</div>}\n            </div>\n            <div className=\"main_content\">\n                {title && <h3>{title}</h3>}\n                {subTitle && <h4>{subTitle}</h4>}\n                {content && <div className=\"content\">{content}</div>}\n            </div>\n        </div>\n    );\n}\n\nInfoBlock.propTypes = {\n    title: PropTypes.string,\n    subTitle: PropTypes.string,\n    period: PropTypes.string,\n    city: PropTypes.string,\n    content: PropTypes.string\n}\n\nInfoBlock.defaultProps = {\n    title: '',\n    subTitle: '',\n    period: '',\n    city: '',\n    content: ''\n}\n\nexport default InfoBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\n\nconst LineSeparator = ({ color, height, topGap, bottomGap }) => (\n    <hr\n        style={{\n            color: color,\n            backgroundColor: color,\n            height: height,\n            marginTop: topGap,\n            marginBottom: bottomGap\n        }}\n    />\n);\n\nLineSeparator.propTypes = {\n    color: PropTypes.string,\n    height: PropTypes.string,\n    topGap: PropTypes.number,\n    bottomGap: PropTypes.number,\n}\n\nLineSeparator.defaultProps = {\n    color: '#e4e4e4',\n    height: '1px',\n    topGap: 10,\n    bottomGap: 10\n}\n\nexport default LineSeparator;\n","import React from 'react';\nimport InfoSection from '../../components/InfoSection';\nimport InfoBlock from '../../components/InfoBlock';\nimport LineSeparator from '../../components/LineSeparator';\nimport {\n    getProfileInfo,\n    getEmploymentHistory, \n    getEducationInfo, \n    getCources\n} from '../../services/DataProvider';\n\nimport './index.scss';\n\nclass MainContent extends React.Component {\n    renderEmploymentHistory() {\n        const employment = getEmploymentHistory();\n        return employment.map(entry => {\n            const {city, company, jd, period, position, duration, tech} = entry;\n            const renderInFoBlockContent = (job, technoligies) => {\n                return (\n                    <React.Fragment>\n                        {job && \n                            <p>\n                                <span>JD:</span>{job}\n                            </p>\n                        }\n                        {technoligies && \n                            <p>\n                                <span>Technologies:</span>{technoligies}\n                            </p>\n                        }\n                    </React.Fragment>\n                );\n            }\n\n            return <InfoBlock \n                title={position}\n                subTitle={`${company} (${duration})`}\n                period={period}\n                city={city}\n                content={renderInFoBlockContent(jd, tech)}\n            />;\n        });\n    }\n\n    renderEducation() {\n        const education = getEducationInfo();\n\n        return education.map(entry => {\n            const {institution, degree, city, period} = entry;\n\n            return <InfoBlock \n                title={institution}\n                subTitle={degree}\n                period={period}\n                city={city}\n            />;\n        });\n    }\n\n    renderCources() {\n        const cources = getCources();\n\n        return cources.map(entry => {\n            const {institution, cource, period} = entry;\n            console.log(entry);\n            return <InfoBlock \n                title={cource}\n                subTitle={institution}\n                period={period}\n                city={'Online'}\n            />;\n        });\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <LineSeparator />\n                <InfoSection title=\"Profile\">\n                    <p>{getProfileInfo()}</p>\n                </InfoSection>\n                <LineSeparator />\n                <InfoSection title=\"Employment History\" contentAlignment=\"column\">\n                    {this.renderEmploymentHistory()}\n                </InfoSection>\n                <LineSeparator />\n                <InfoSection title=\"Education\" contentAlignment=\"column\">\n                    {this.renderEducation()}\n                </InfoSection>\n                <LineSeparator />\n                <InfoSection title=\"Cources\" contentAlignment=\"column\">\n                    {this.renderCources()}\n                </InfoSection>\n                <LineSeparator />\n                <InfoSection title=\"Languages\">\n                    \n                </InfoSection>\n                <LineSeparator />\n                <InfoSection title=\"References\">\n                    \n                </InfoSection>\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default MainContent;\n","import data from './data.json';\nimport {\n    SECTION_PROFILE,\n    SECTION_COURCES,\n    SECTION_EDUCATION,\n    SECTION_EMPLOYMENT,\n    SECTION_LANGUAGES,\n    SECTION_LINKS,\n    SECTION_REFERENCES\n} from './constants';\n\nconst getProfileInfo = () => data[SECTION_PROFILE];\nconst getEmploymentHistory = () => data[SECTION_EMPLOYMENT];\nconst getEducationInfo = () => data[SECTION_EDUCATION];\nconst getCources = () => data[SECTION_COURCES];\nconst getLanguages = () => data[SECTION_LANGUAGES];\nconst getReferences = () => data[SECTION_REFERENCES];\nconst getLinks = () => data[SECTION_LINKS];\n\n\nexport {getProfileInfo};\nexport {getEmploymentHistory};\nexport {getEducationInfo};\nexport {getCources};\nexport {getLanguages};\nexport {getReferences};\nexport {getLinks};\n","import React from 'react';\nimport Header from './containers/Header';\nimport MainContent from './containers/MainContent';\n\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}