{"version":3,"sources":["me.jpeg","components/Header/index.js","components/LineSeparator/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","photo","alt","href","target","rel","LineSeparator","color","height","topGap","bottomGap","style","backgroundColor","marginTop","marginBottom","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,iC,kNCsD5BC,MAjDf,WACI,OACM,gCACE,yBAAKC,UAAU,SACb,6CACA,wBAAIA,UAAU,QAAd,qBACA,yBAAKC,IAAKC,IAAOF,UAAU,QAAQG,IAAI,UAEzC,6BAASH,UAAU,YACjB,yBAAKA,UAAU,gBACb,2BAAG,0BAAMA,UAAU,QAAhB,WAAH,oDACA,2BACE,0BAAMA,UAAU,QAAhB,SACA,uBAAGI,KAAK,kCAAR,4BAEF,2BACE,0BAAMJ,UAAU,QAAhB,SACA,uBACEA,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,YAFF,IAQE,uBACEN,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,UARF,IAcE,uBACEN,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,YASJ,yBAAKN,UAAU,iBACb,2BAAG,0BAAMA,UAAU,QAAhB,SAAH,iBACA,2BAAG,0BAAMA,UAAU,QAAhB,iBAAH,sBCvCVO,G,MAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,UAA1B,OAClB,wBACIC,MAAO,CACHJ,MAAOA,EACPK,gBAAiBL,EACjBC,OAAQA,EACRK,UAAWJ,EACXK,aAAcJ,OAS1BJ,EAAcS,aAAe,CACzBR,MAAO,UACPC,OAAQ,MACRC,OAAQ,GACRC,UAAW,IAGAJ,Q,MCdAU,MATf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.20432af0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.fa4a78f9.jpeg\";","import React from 'react';\nimport photo from './../../me.jpeg';\n\nimport './index.scss';\n\nfunction Header() {\n    return (\n          <header>\n            <div className=\"intro\">\n              <h1>Oleksii Semko</h1>\n              <h2 className=\"blue\">Sr. Web Developer</h2>\n              <img src={photo} className=\"photo\" alt=\"logo\" />\n            </div>\n            <address className=\"contacts\">\n              <div className=\"contact left\">\n                <p><span className=\"blue\">Address</span>Gostomel highway, Bldg. 3, Irpin, 08206, Ukraine</p>\n                <p>\n                  <span className=\"blue\">Email</span>\n                  <a href=\"mailto:oleksii.semko@gmail.com\">oleksii.semko@gmail.com</a>\n                </p>\n                <p>\n                  <span className=\"blue\">Links</span>\n                  <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >Linkedin</a>,\n                  <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >Upwork</a>,\n                  <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >Github</a>\n                \n                </p>\n              </div>\n              <div className=\"contact right\">\n                <p><span className=\"blue\">Phone</span>+380931184382</p>\n                <p><span className=\"blue\">Date of birth</span>March 21, 1986</p>\n\n              </div>\n            </address>\n          </header>\n      );\n    \n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\n\nconst LineSeparator = ({ color, height, topGap, bottomGap }) => (\n    <hr\n        style={{\n            color: color,\n            backgroundColor: color,\n            height: height,\n            marginTop: topGap,\n            marginBottom: bottomGap\n        }}\n    />\n);\n\nLineSeparator.propTypes = {\n    color: PropTypes.string\n}\n\nLineSeparator.defaultProps = {\n    color: '#e4e4e4',\n    height: '1px',\n    topGap: 10,\n    bottomGap: 10\n}\n\nexport default LineSeparator;\n","import React from 'react';\nimport Header from './components/Header';\nimport LineSeparator from './components/LineSeparator';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <LineSeparator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}